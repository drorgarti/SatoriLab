import sys, traceback
from importer.csv_importer import CSVImporter
from enrichment.enrichment_service import EnrichmentData, EnrichmentBehavior, EnrichmentSource
from utils.email_util import EmailUtil
from utils.acurerate_utils import AcureRateUtils
from entities.acurerate_attributes import P


class CSVContactsImporter(CSVImporter):

    google_mapping2 = {
        "First Name": P.FIRST_NAME,
        "Middle Name": P.MIDDLE_NAME,
        "Last Name": P.LAST_NAME,
        "Title": P.PREFIX,
        "Suffix": P.SUFFIX,
        "Web Page": P.WEBSITE,
        "Gender": P.GENDER,
        "Birthday": P.DOB,
        "Notes": "notes",
        "E-mail Address": "email1",
        "E-mail 2 Address": "email2",
        "E-mail 3 Address": "email3",
        "Primary Phone": "phone1",
        "Home Phone": "phone2",
        "Mobile Phone": "phone3",
        "Home Phone 2": "phone4",
        "Business Phone": "phone5",
        "Business Phone 2": "phone6",
        "Business Fax": "phone7",
        "Assistant's Phone": "phone8",
        "Other Phone": "phone9",
        "Company Main Phone": "phone10",
        "Car Phone": "phone11",
        "Company": "job_name1",
        "Job Title": "job_title1",
        "Manager's Name": P.DIRECT_MANAGER,
        "Categories": "categories"
    }

    google_mapping = {
        "Given Name": "first_name",
        "Additional Name": "middle_name",
        "Family Name": "last_name",
        "Name Prefix": "prefix",
        "Name Suffix": "suffix",
        "E-mail 1 - Value": "email1",
        "E-mail 2 - Value": "email2",
        "E-mail 3 - Value": "email3",
        "Phone 1 - Value": "phone1",
        "Phone 2 - Value": "phone2",
        "Phone 3 - Value": "phone3",
        "Organization 1 - Name": "job_name1",
        "Organization 2 - Name": "job_name2",
        "Organization 3 - Name": "job_name3",
        "Organization 1 - Title": "job_title1",
        "Organization 2 - Title": "job_title2",
        "Organization 3 - Title": "job_title3"
    }

    linkedin_outlook_mapping = {
        "First Name": "first_name",
        "Middle Name": "middle_name",
        "Last Name": "last_name",
        "ISDN": "prefix",  # TODO: should be - "Title": "prefix",
        "Suffix": "suffix",
        "E-mail Address": "email1",
        "Business Phone": "phone1",
        "Company": "job_name1",
        "Job Title": "job_title1"
    }

    def __init__(self, path, encoding, source, attribution_id, attribution_name, providers=None, mapping=None, test_import=False, logger=None):
        super().__init__(path, encoding, source, attribution_id, attribution_name, providers, mapping, test_import, logger)
        pass

    def should_ignore_row(self, row):

        # Is this a row generated by GroupMe:
        if row['First Name'] == 'GroupMe:':
            return True

        return False

    def handle_row(self, mapped_row, raw_row, row_number):
        super().handle_row(mapped_row, raw_row, row_number)

        # Is this row an artifact of some kind of App or other synthetic data?
        if self.should_ignore_row(raw_row):
            self.logger.warning("Synthetic row. Ignoring. (row: %s)", raw_row)
            return False

        # TODO: special optimizations for the wise-crackers...
        # (1) fname = "ploni almoni", lname = <empty>
        # (2) fname = <empty>, lname = "ploni almoni"
        # (3) fname = "ploni almoni", lname = "email@domain.com"

        # Sanity check to make sure row is with values
        if mapped_row is None or mapped_row['email1'] is None:
            self.logger.error("Something went awry... email attribute is None. Aborting")
            raise Exception("Something went awry during parsing... email attribute is None. Aborting")

        ed = []
        emails = set()
        for i in [1, 2, 3]:
            attr = 'email%d' % i
            if attr in mapped_row and mapped_row[attr].strip() != '':
                emails.add(mapped_row[attr].strip())
        verified_emails = [e for e in list(emails) if EmailUtil.is_valid(e)]
        best_email = EmailUtil.get_preferred_email_from_list(verified_emails)
        if best_email is None:
            if emails is None or len(emails) == 0:
                reason = "No emails detected"
            elif len(verified_emails) == 0:
                reason = "No verified emails - %s" % emails
            else:
                reason = "%s" % emails
            self.logger.warning("Row %d: %s %s: Cannot set key email. %s. Ignoring.", row_number, mapped_row['first_name'], mapped_row['last_name'], reason)
            return False
        key_email = EmailUtil.email_as_key(best_email)
        ed.append(EnrichmentData(P.EMAIL, key_email, 'override'))
        key = {P.EMAIL: key_email}
        error = None
        fname = AcureRateUtils.remove_parenthesized_content(mapped_row['first_name'].strip())
        lname = AcureRateUtils.remove_parenthesized_content(mapped_row['last_name'].strip())
        if '?' in fname or '?' in lname:
            self.logger.warning("Row %d - found suspicious name - fname: %s, lname: %s ('?' in name). Replacing and continuing.", row_number, mapped_row['first_name'], mapped_row['last_name'])
            fname = fname.replace('?', '').strip()
            lname = lname.replace('?', '').strip()

        if not AcureRateUtils.valid_name(fname) or not AcureRateUtils.valid_name(lname):
            self.logger.warning("Row %d: non-alphanumeric characters in name - fname: %s, lname: %s. Continuing.", row_number, mapped_row['first_name'], mapped_row['last_name'])

        # Handle cases where contact full English name is in FIRST_NAME field and full name in Hebrew in LAST_NAME
        if len(fname.split()) == 2 and lname == '':
            lname = fname.split()[1]
            fname = fname.split()[0]
        elif len(lname.split()) == 2 and fname == '':
            fname = lname.split()[0]
            lname = lname.split()[1]

        if fname == "" or lname == "":
            error = "Row %d: empty name after cleaning - fname: %s, lname: %s. Ignoring." % (row_number, mapped_row['first_name'], mapped_row['last_name'])
        elif '&' in fname or '&' in lname:
            error = "Row %d: '&' in name after cleaning - fname: %s, lname: %s. Ignoring." % (row_number, mapped_row['first_name'], mapped_row['last_name'])
        elif '@' in fname or '@' in lname:
            error = "Row %d: '@' in name after cleaning - fname: %s, lname: %s. Ignoring." % (row_number, mapped_row['first_name'], mapped_row['last_name'])
        elif len(fname) == 1 and len(lname) == 1:
            error = "Row %d: suspicious name - fname: %s, lname: %s (too short...) Ignoring." % (row_number, mapped_row['first_name'], mapped_row['last_name'])
        if error:
            self.logger.warning(error)
            return False

        if len(fname) <= 2 or len(lname) <= 2:
            self.logger.warning("Row %d: suspicious name - fname: %s, lname: %s (too short...) Continuing.", row_number, mapped_row['first_name'], mapped_row['last_name'])
        if len(fname.split()) > 1 or len(lname.split()) > 1:
            self.logger.warning("Row %d: suspicious name - fname: %s, lname: %s (space in fname/lname) Continuing.", row_number, mapped_row['first_name'], mapped_row['last_name'])

        ed.append(EnrichmentData(P.FIRST_NAME, fname.title(), 'override'))
        ed.append(EnrichmentData(P.LAST_NAME, lname.title(), 'override'))

        if mapped_row['middle_name'].strip() != "":
            ed.append(EnrichmentData(P.MIDDLE_NAME, mapped_row['middle_name'].strip(), 'override'))
        if mapped_row['prefix'].strip() != "":
            ed.append(EnrichmentData(P.PREFIX, mapped_row['prefix'].strip(), 'override'))
        if mapped_row['suffix'].strip() != "":
            ed.append(EnrichmentData(P.SUFFIX, mapped_row['suffix'].strip(), 'override'))

        # Handle email attributes (even if some are invalid emails - may lead to needed info in later stages)
        for i in [1, 2, 3]:
            if ("email%d" % i) in mapped_row and mapped_row["email%d" % i].strip() != "":
                ed.append(EnrichmentData(P.EMAILS, mapped_row["email%d" % i].strip(), 'add'))

        # Handle phone attributes
        for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:
            if ("phone%d" % i) in mapped_row and mapped_row["phone%d" % i].strip() != "":
                ed.append(EnrichmentData(P.PHONES, mapped_row["phone%d" % i].strip(), 'add'))

        # TODO: handle cases where more than one org/title is mentioned
        # TODO: write code better... (dict2dict... ?)
        org = mapped_row.get('job_name1', None)
        title = mapped_row.get('job_title1', None)
        if org is not None and org.strip() != "" and title is not None and title.strip() != "":
            ed.append(EnrichmentData(P.JOBS, {'job_name': org, 'job_title': title}, 'add'))
        elif org is not None and org.strip() != "" and title is None:
            ed.append(EnrichmentData(P.JOBS, {'job_name': org}, 'add'))
        elif org is None and title is not None and title.strip() != "":
            ed.append(EnrichmentData(P.JOBS, {'job_title': title}, 'add'))

        # Is there a DOB field? Convert it to python timestamp
        if P.DOB in mapped_row and mapped_row[P.DOB] != '':
            ed.append(EnrichmentData(P.DOB, AcureRateUtils.normalized_dob(mapped_row[P.DOB]), 'add'))

        # Is there a direct manager marked?
        if P.DIRECT_MANAGER in mapped_row and mapped_row[P.DIRECT_MANAGER] != '':
            ed.append(EnrichmentData(P.DIRECT_MANAGER, mapped_row[P.DIRECT_MANAGER], 'add'))

        if P.WEBSITE in mapped_row and mapped_row[P.WEBSITE] != '':
            ed.append(EnrichmentData(P.WEBSITE, mapped_row[P.WEBSITE], 'add'))

        # Anything worthwhile in the notes?
        if 'notes' in mapped_row and mapped_row['notes'].strip() != '':
            #self.logger.info('Row %d - contact %s %s got notes - anything interesting here? Notes: %s', row_number, fname, lname, mapped_row['notes'])
            self.logger.info('Row %d: contact %s %s got notes - anything interesting here?', row_number, fname, lname)

        # Anything worthwhile in the notes?
        if 'categories' in mapped_row and mapped_row['categories'].strip() != '':
            categories = mapped_row['categories'].lower().split(";")
            # TODO: temp code below. Remove.
            if 'friends' in categories or 'friend' in categories or 'sayarut' in categories or 'hofen' in categories:
                self.logger.warning('Contact %s %s filtered out because of irrelevant category (categories: %s)', fname,
                                    lname, mapped_row['categories'])
                return False

        # Mark the source these contacts came from:
        ed.append(EnrichmentData(P.ATTRIBUTION_ID, self.attribution_id, 'override'))
        ed.append(EnrichmentData(P.ATTRIBUTION_NAME, self.attribution_name, 'override'))

        if not self.test_import:
            self.logger.info('Row %d: key_email: %s. Sending to enrichment...', row_number, key_email)
            source = EnrichmentSource(source_type=self.source, source_key='%s %s' % (self.attribution_id, best_email.lower()))
            behavior = EnrichmentBehavior(create_new=True, providers=self.providers)
            self.es.enrich_person(enrichment_key=key, enrichment_data=ed, enrichment_source=source, enrichment_behavior=behavior)
        return True
